A C# console application doesn't typically involve unit testing as it's a simple and single standalone piece of code. However, if this was part of a larger application, you could write a unit test by checking the output of the console after running the program. 

Let's use NUnit for testing:

```CSharp
using System;
using NUnit.Framework;
using System.IO;

namespace HelloWorldTests
{
    [TestFixture]
    public class ProgramTests
    {
        private StringWriter stringWriter;
        private TextWriter originalOutput;

        [SetUp]
        public void SetUp()
        {
            stringWriter = new StringWriter();
            originalOutput = Console.Out;
            Console.SetOut(stringWriter);
        }

        [TearDown]
        public void TearDown()
        {
            Console.SetOut(originalOutput);
        }

        [Test]
        public void Main_PrintsHelloWorld()
        {
            HelloWorld.Program.Main();

            Assert.That(stringWriter.ToString(), Is.EqualTo("Hello, World!\r\n")); 
            // The expected output string depends on your system, "\r\n" for non-Unix systems, "\n" for Unix systems.
        }

    }
}
```

However, you rarely test applications this way. You would usually refactor the application to make it more testable.

Note: This would normally be placed in a separate testing project and have a reference to the project under test.